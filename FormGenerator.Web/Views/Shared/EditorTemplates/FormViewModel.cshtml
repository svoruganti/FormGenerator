@using Newtonsoft.Json
@model FormGenerator.ViewModel.FormViewModel

<div id="content">
</div>

<script type="text/babel">
    class FormInstance extends React.Component {
        constructor(props){
            super(props);
        }
        render(){
            return (<ReactBootstrap.Form onSubmit={this.handleSubmit.bind(this)}>
                @foreach (var formField in Model.FormFieldViewModels.OrderBy(x => x.Order))
                {
                    var refString = $"ref={{instance => this.{formField.Code} = instance}}";
                    <@formField.ControlType @Html.Raw(refString) label="@formField.Label" code="@formField.Code" children="@JsonConvert.SerializeObject(formField.ReferenceDataViewModels)" cols="@formField.Columns" branching="@JsonConvert.SerializeObject(formField.ParentForBranching)"/>
                }
            </ReactBootstrap.Form>);
        }

        handleSubmit(e){
            e.preventDefault();
            store.dispatch(returnValidationAction(true));
            this.props.components.forEach((item) => {
                if (typeof this[item].validate == "function"){
                    this[item].validate();
                }
            });

            if (!store.getState().isFormValid){
                console.log("Not submitting form as there are errors");
                return;
            }

            fetch(this.props.saveUrl, {
                headers: {
                    "content-type": "application/json",
                    "accept": "application/json"
                },
                method: "post",
                body: JSON.stringify(store.getState().formData)
            }).then((response) => {
                return response.json();
            }).then((json) => {
                $.each(json, (k, v) => {
                    let messages = new Map();
                    messages.set(k, v);
                    this[k].setValidationMessages(messages);
                })
            }).catch((error) => {
                console.log(error);
            });
        }

        componentDidMount(){
            fetch(this.props.loadUrl, {
                method: "get"
            }).then(function(response){
                return response.json();
            }).then(function(response){
                store.dispatch(returnLoadAction(response.formData));
            }).catch(function(error){
                console.log(error);
            });
        }
    };
    const formControls = ['@Html.Raw(String.Join("','", Model.FormFieldViewModels.Select(x => x.Code)))']
    ReactDOM.render(<ReactRedux.Provider store={store}><FormInstance loadUrl="@Model.LoadUrl" saveUrl="@Model.SaveUrl" components={formControls}/></ReactRedux.Provider>, document.getElementById("content"));
</script>
