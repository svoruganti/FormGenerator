@using Newtonsoft.Json
@model FormGenerator.ViewModel.FormViewModel

<div id="content">
</div>

<script type="text/babel">
    class FormInstance extends React.Component {
        constructor(props){
            super(props);
            this.state = {formData:{}};
        }
        render(){
            return (<ReactBootstrap.Form onSubmit={this.handleSubmit.bind(this)}>
                @foreach (var formField in Model.FormFieldViewModels.OrderBy(x => x.Order))
                {
                    var refString = $"ref={{instance => this.{formField.Code} = instance}}";
                    <@formField.ControlType @Html.Raw(refString) label="@formField.Label" code="@formField.Code" children="@JsonConvert.SerializeObject(formField.ReferenceDataViewModels)" cols="@formField.Columns" branching="@JsonConvert.SerializeObject(formField.ParentForBranching)"/>
                }
            </ReactBootstrap.Form>);
        }

        handleSubmit(e){
            e.preventDefault();
            this["FBAE03_1"].validate();
            this["FBAE03_2"].validate();
            this["FBAE03_5"].validate();
        }

        componentDidMount(){
            fetch(this.props.loadUrl, {
                method: "get"
            }).then(function(response){
                return response.json();
            }).then(function(response){
                store.dispatch(returnLoadAction(response.formData));
            }).catch(function(error){
                console.log(error);
            });
        }

        setFormData(controlId, value){

        }
    };
    ReactDOM.render(<FormInstance loadUrl="@Model.LoadUrl" saveUrl="@Model.SaveUrl"/>, document.getElementById("content"));
</script>